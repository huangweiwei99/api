<?phpnamespace app\wms\model;use app\common\model\WMSBase as WMSBaseModel;use think\Log;class Purchase extends WMSBaseModel{    /*******************类属性*******************/    /*******************类方法*******************/    public function contents()    {        return $this->hasMany('PurchaseContent', 'pid', 'id');    }    /**     * 描述：获取产品列表信息     * @date 2017年11月3日上午11:08:33     * @param    string $keywords 搜索关键词     * @param    integer $page 页序数     * @param    integer $limit 每页数量     * @return   boolean|string|array              false|错误信息|产品列表     */    public function getDataList($keywords, $page, $limit)    {        $map = [];        if ($keywords) {            $map['name'] = ['like', '%' . $keywords . '%'];        }        try {            $dataCount = $this->alias('purchase')->where($map)->count('id');            if ($dataCount === 0) {                $this->error = '没有数据';                return false;            }            $list = $this                ->where($map)->alias('gms_purchase');            // 若有分页            if ($page && $limit) {                $list = $list->page($page, $limit);            }            $list = $list->select();            $data['list'] = $list;            $data['count'] = $dataCount;            return $data;        } catch (\Exception $e) {            Log::write($e->getMessage(), 'error');            $this->error = iconv('', 'utf-8', $e->getMessage());            return false;        }    }    public function createData($param)    {        $validate = validate($this->name);        if (!$validate->check($param)) {            $this->error = $validate->getError();            return false;        }        $this->startTrans();        try {            $this->data($param)->allowField(true)->save();            if (!empty($param['content'])) {                $this->contents()->saveAll($param['content']);            }            $this->commit();            return true;        } catch (\Exception $e) {            Log::write($e->getMessage(), 'error');            $this->error = '添加失败:' . $e->getMessage();            $this->rollback();            return false;        }    }    public function updateDataById($param, $id, $scense = null)    {        // 验证        $validate = validate($this->name);        if (!$validate->scene($scense)->check($param)) {            $this->error = $validate->getError();            return false;        }        $this->startTrans();        try {            $data = $this->getDataById($id);            if (!$data) {                return $data;            }            $this->allowField(true)->save($param, [$this->getPk() => $id]);            if (!empty($param['content'])) {                $this->contents()->delete();                $this->contents()->saveAll($param['content']);            }            $this->commit();            return true;        } catch (\Exception $e) {            Log::write($e->getMessage(), 'error');            $this->error = '编辑失败 : ' . $e->getMessage();            $this->rollback();            return false;        }    }    public function delDataById($id = '', $delSon = false)    {        $this->startTrans();        try {            $data = $this->getDataById($id);            if (!$data) {                return $data;            }            $this->where($this->getPk(), $id)->delete();            $this->contents()->delete(['pid' => $id]);            $this->commit();            return true;        } catch (\Expection $e) {            Log::write($e->getMessage(), 'error');            $this->error = '删除失败: ' . $e->getMessage();            $this->rollback();            return false;        }    }    public function delDataCollection($ids = [], $delSon = false)    {        $this->startTrans();        try {            foreach ($ids as $id) {                $data = $this->getDataById($id);                if (!$data) {                    return $data;                    break;                }                $this->where($this->getPk(), $id)->delete();                $this->contents()->delete(['pid' => $id]);                $this->commit();            }            return true;        } catch (\Exception $e) {            $this->error = '操作失败: ' . $e->getMessage();            $this->rollback();            return false;        }    }}